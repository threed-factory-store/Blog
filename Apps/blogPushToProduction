#!/bin/bash

echo "blogPushToProduction"
unalias cp

if [ "$USER" != "wzjzus5" ]
then
    echo "Run 'su wzjzus5' first!"
    echo "and run 'exit' after"
    exit 1
fi

if [ -f /home/$USER/public_html/Apps/blogcommon ]
then
    . /home/$USER/public_html/Apps/blogcommon
fi

PushToProdFolder="/home/$USER/blogPushToProduction"
# zipFileRootName MUST match zipFileRootName in /home/Walt/Documents/Apps/blogPushToProduction
zipFileRootName="blog_Prod_"

DeleteOldReleases() {
    echo "Deleting old releases"
	daysToKeep=10
	numberToKeep=10
#	find "${folder}" -name "${folderSpec}" -type d -ctime +${daysToKeep} -exec rm -rf {} \;
	
	secondsSinceEpoch=$(date -d "${daysToKeep} days ago" "+%s")
	stat -c "%Y %n" ${PushToProdFolder}/${zipFileRootName}*.zip | sort -nr | tail -n +${numberToKeep} | while read -r mtime name; do
        if (( mtime < secondsSinceEpoch )); then
            echo "remove $name"
            rm "$name"
        fi
	done
}

# Get the latest zip file.  All releases are full releases so that's all we should ever need to process.
cd "${PushToProdFolder}"
fileName=$(ls --sort=time blog_Prod_* | head --lines=1)
echo "About to push ${fileName} to Production"
pause

cd "${ProdFolder}"
if [ "${ProdFolder}" != "$PWD" ]
then
    echo "Not in Prod folder"
    echo "ProdFolder='${ProdFolder}'"
    echo "pwd='$PWD'"
    exit 3
fi
echo "Unzipping ${PushToProdFolder}/${fileName}"
unzip -q -o "${PushToProdFolder}/${fileName}"
if [ "$?" != "0" ]
then
    echo "Unzip failed"
    exit 4
fi

if [ -f .env.prod ]
then
    cp .env.prod .env
    rm .env.prod
fi
if [ -f index.cgi.prod ]
then
    cp index.cgi.prod index.cgi
    rm index.cgi.prod
fi

python3.10 -m ensurepip --upgrade
python3.10 -m pip install --user Flask
python3.10 -m pip install --user python-dotenv
python3.10 -m pip install --user Markdown

DeleteOldReleases

echo "blogPushToProduction Done!"
echo "Now, exit from wzjzus5 and run blogCopyApps"
